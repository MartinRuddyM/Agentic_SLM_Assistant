run_system: "python -m streamlit run app.py"

interaction_summary: >
  A Q&A conversation between the user and an expert is taking place.
  Below is the last Question and its corresponding expert answer.

  Task:

  Create a SHORT **one-paragraph** summary of what the Q&A interaction was about.
  Include within the paragraph all relevant technical keywords, 
  and keep a mention of all important things related to the user context and situation.
  Do not mention the fact that you are making a summary. ONLY write the summary itself.

  Question & Answer to summarize:

  {interaction}


  ONE-PARAGRAPH SHORT SUMMARY:


interaction_summary_with_reasoning: >
  A Q&A conversation between the user and an expert is taking place.
  Below is the last Question and its corresponding expert answer.
  Also, the ReAct steps reasoning for the answer is provided.

  Task:

  Create a SHORT **one-paragraph** summary of what the Q&A interaction was about.
  Include within the paragraph all relevant technical keywords, 
  and keep a mention of all important things related to the user context and situation.
  Do not mention the fact that you are making a summary. ONLY write the summary itself.

  After the summary itself, append (add, write) as a copy ALL THE SPECIFIC DATA and 
  textual information that was used to get to the answer, if any.

  For example, in case the answer was achieved researching some numbers and getting to a
  list and making python code, you MUST write a copy of the list of data, and write the
  python code used (final version is enough). Another example, if the user asked about 
  different famous writers, write exactly ALL AUTHORS that were discussed and their books, etc.

  All of the important information must be ENTIRELY REWRITTEN for record purposes. However, do not
  just copy everything, only important stuff, but the important stuff write it fully.

  Question & Answer to summarize, and Reasoning:

  {interaction}


  ONE-PARAGRAPH SHORT SUMMARY (plus Annex of source data and code & things used):


last_n_summary: >
  There was a Q&A conversation between a user and an expert. 
  Given these questions and answers found in the conversation, 
  generate a **one-paragraph** summary of what the conversation was about.
  Include within the paragraph all relevant technical keywords, 
  and keep a mention of all important things related to the user context and situation.
  Do not mention the fact that you are making a summary. ONLY write the summary itself.

  CONVERSATION:

  {conversation_text}


  SUMMARY OF CONVERSATION:


final_summary: >
  There was a Q&A conversation between the user and an expert.
  Below are summaries from all Q&As of the conversation.
  Generate an overall, final **one-paragraph** conversation summary.
  Include within the paragraph all relevant technical keywords and details from the user mentioned.
  Do not mention the fact that you are making a summary. ONLY write the final summary itself.

  Partial summaries of the sections of the conversation:

  {partial_summaries}

  FINAL ONE-PARAGRAPH SUMMARY:


extract_permanent_user_info: |
  There has been a conversation between an expert LLM and the user.
  Below is the list of questions and prompts that the user has asked during the conversation.
  We want to personalise the service so we need to identify personal information about the user.
  It's like a marketing agency trying to store key personal information for sales and customer satisfaction.
  Look at the list of questions and prompts and focus on personal characteristics about the user or his/her life,
  things that are relevant for a Question & Answer service to know.
  Return a list of ONE-SENTENCE STATEMENTS about VERY IMPORTANT information that the user reveals. Use simple, plain English in second person.
  If there is no relevant information leave it empty.
  There is an example below. You should return a JSON format like the following cotaining the most relevant information:

  EXAMPLE USER QUESTIONS:
  I am doing a project with AutoCAD. How can I copy an existant line and paste it in parallel with sale of 2x?
  
  The program is not letting me fill an area with colour.
  
  Okay, so I closed the line and now it is working, thank you. Now let's work on another project writing my kitchen book. Can you expand on the idea of desset recipies made of wild berries from Germany?
  
  What program can I use to add photos into the book's chapters?
  
  How to increase the length of inserted photos.
  
  Increase brightness and edit with some template. Have any template ideas?
  
  Oh yes, I meant filters instead of templates. Then which filters would you recommend?
  
  Allright, I tried a few and now I found a good one. Now tell me, is there any more advanced software that I can use to edit the images? This seems a bit too basic.
  
  I can't install the software needed for the image, it says: Software not commpatible with your system.
  
  I checked the setting and I am running on Windows 64 bits.
  
  Okay how can I share the current version of the work? My niece is coming tomorrow and I want to show her in advance, she really likes photography.
  
  I tried the share button but it's now working. Should I try with my Gmail account instead of Facebook?
  
  Thank you
  

  EXAMPLE OUTPUT WITH KEY INFORMATION FOR A PERSONALIZED Q&A SYSTEM TO KNOW:
  {{
  "items": [
    "1. The user does projects with AutoCAD",
    "2. The user is writing a kitchen book",
    "3. The user has a Windows operative system of 64 bits",
    "4. The user has a female niece",
    "5. The user's female niece loves photography",
    "6. The user uses Facebook",
    "7. The user has a Gmail account"
  ]
  }}


  Notice how unimportant tasks or intermediate steps are left behind. Focus only on the most important personal information about the user, which could be useful to help in another Q&A session.
  Make your statements specific as to where, what, when, etc. NOT vague.
  Now search for the most important user details and list them in JSON format, if any.
  BASE YOUR ANSWER ONLY ON THE INFORMATION PROVIDED. DO NOT MAKE ANYTHING UP.

  USER QUESTIONS:

  {user_questions}

  KEY INFORMATION STATEMENTS IN JSON FORMAT:
  

personalize_final_asnwer_simplified: >
  There is a conversation between a user and an expert Q&A system.
  Just previously in the conversation, these Questions and Answers happened (if any):

  {interactions_summary}



  The expert Q&A system has answered the following query:

  Query: {query}

  Answer: {answer}



  Rewrite the Answer KEEPING ALL INFO AND MEANING THE SAME. If there is an annex
  above, do not focus on it, it is just meant to contextually help. Focus on the user
  Query and answer which is the one you must personalize. Use the tone "I"
  and talk to the user of "You". KEEP ALL INFORMATION THE SAME you should only change the
  tone of the answer. At the end, add a VERY BRIEF suggestion of how you can
  help next regarding the Query. Rewrite it now.

  Rewritten Answer changing the tone: (answer directly as if talking to the user, do not mention your task)


personalize_final_asnwer: >
  There is a conversation between a user and an expert Q&A system.
  Just previously in the conversation, these Questions and Answers happened (if any):

  {interactions_summary}


  This is summaries from previous conversations with our system for contextualization (if any):

  {conversation_summaries}



  The expert Q&A system has answered the following query:

  {query}

  There is some personal info from the user below:

  {user_info}





  Rewrite the system answer below KEEPING ALL INFO AND MEANING THE SAME. Use the tone "I"
  and talk to the user of "You".
  KEEP THE CONVERSATION FLOWING LOGICALLY given the last Q&A interactions so
  the answer makes conversational sense.
  Additionally, ONLY IF YOU FIND some VERY RELEANT and similar thing in the user info or
  context, you can make a reference to it somewhere in your answer, so the user feels
  like we remember about him. SKIP THIS by default and ONLY add something if there
  REALLY is something really matching. At the end, make suggestions regarding what to help with next
  with regards to the Question and Answer the user is just getting.
  
  Here is the system answer to rewrite:

  Answer: {answer}

  Now your Rewritten Answer: (answer directly as if talking to the user, do not mention your task)


contrast_user_information: |
  You are given a list of existing statements about a user in an information marketing DB.
  You are also given a suggestion of new found statements that are being considered to add into the DB.
  Task: Go through the NEW STATEMENTS and decide which of them are TRULY NEW, that is, they were not included in the original list of information.
  In your answer, write all of the NEW STATEMENTS that are TRULY NEW, NOT REPEATED.
  If in doubt of whether it is truly new, do not include it (do not write it).
  Answer in JSON format.

  Example 1:

  Original statements:
  The user plays Minecraft.
  The user has a Microsoft Windows OS.
  The user lives in Valencia.
  The user studies in University.
  The user plays football.
  The user does not like spicy food.

  Possible new statements:
  Andrew frequently attends to basketball matches.
  The user has a Windows laptop.
  Andrew dislikes hot food.
  Andrew plays Minecraft on weekends.

  Truly new statements in JSON format:
  {{
  "items": [
    "1. The user frequently attends to baasketball matches."
  ]
  }}

  Example 2:

  Original statements:
  The user likes sewing.
  The user's favourtie color is purple.
  The user likes dark blue color.
  The user is inspired by modern art.
  The user is allergic to cinammon.

  Possible new statements:
  Roxie studies in Beijing University.
  Roxie prefers dark blue for art projects.
  She has strong allergic reactions to cinammon.
  She has coursework on graphic pencil design.

  Truly new statements in JSON format:
  {{
  "items": [
    "1. The user studies in Beijing University.",
    "2. The user has coursework on graphic pencil design.",
  ]
  }}

  Example 3:

  Original statements:
  The user is interested in getting a US visa.
  The user is a citizen of Chile.
  The user did a trip through Europe.

  Possible new statements:
  The user reads information of travelling and relocating to the United States.
  The user lives in Chile.

  Truly new statements in JSON format:
  {{
  "items": [
  ]
  }}

  Now provide the truly new statements for the user below.

  Original statements:
  {original_statements}

  Possible new statements:
  {new_statements}
  Truly new statements in JSON format:


code_tool_description: >
  Useful to do operations and advanced analysis that python conde and libraries can help with.
  If you have math operations, statistics assignments, or any codeable task, use this tool.

  How to use it: 

  Write a description of the task to be done. An expert coder system will generate and run the code
  as per your description. Give a detailed description of the task to give them context.
  If data is needed for the task, MAKE SURE TO INCLUDE IT IN YOUR DESCRIPTION.
  The code tool only has access to what you input it.
  
  The output of the tool will be what the code can print(), so structure the task
  properly so it can be printed. The expert system will read your description, write code,
  and run it and return the printed answer.


code_task_description: >
  You are an AI that generates Python code. Omit explanations.
  Respond with only the Python code needed for the task. PRINT the results that will answer the task.
  **Only printed results are valid to answer the task**.

  Task:

  {task_description}

  If the task is just python code, then REWRITE THE EXACT SMAE CODE AND KEEP IT AS IT IS.
  DO NOT PROVIDE EXAMPLES OR MULTIPLE CASES. ONLY WRITE ONE SINGLE BLOCK OF CODE THAT
  WILL ANSWER THE TASK. NO EXAMPLES OR CASES.

  Your python code:


code_tool_error: >
  Max retries reached. Unable to generate working code. Please try with a different, better description, or with another tool.


web_search_tool_description: >
  Useful to search the web. All information that you don't know or are not sure about, but need for the
  answer, use this tool. Use this tool to get information on current events, weather information,
  what time and date it is, and anything that the internet can be used for.

  How to use it:

  Provide as INPUT a VERY SHORT SENTENCE of the search terms to be used. The web_search tool will return a
  digested result. The words you write are the search terms themselves, so ONLY WRITE VERY IMPORTANT
  WORDS as INPUT. Think of how an expert SEO marketer would do search queries online. ONLY WRITE
  VERY FEW KEY SEARCH TERMS.


web_search_summarize_findings: >
  A web search has been performed and some results have appeared.
  The original user query that we are trying to solve:

  Original user query:

  {query}


  The search terms that were used in the search:

  {search_terms}

  
  Another teammate of you is going to answer the query based on what you provide them.
  They will NOT have access to the web searches. For each of the findings, you must
  write all the information in them that your colleague will need to answer the
  query. Avoid non-necessary information. Try to summarize the infromation so they
  can focus on the important and have all they need,
  but WRITE ALL DETAILED DATA WHEN NECESSARY for the query.

  SEARCH RESULTS:

  {search_results}


  REMEMBER, don't just make a description of the sources, rather, WRITE ALL IMPORTANT
  INFORMATION IN THEM FOR THE QUERY.
  You must write all the information that is needed for the query. Only the information
  that you actually write can be used!!
  Write the information even if a bit inconsistent. Just write the information, dont
  add notes and judgements.
  IMPORTANT INFORMATION:


web_search_tool_error: >
  No valid search results were found. Some error happened in search tool.


react_step_by_step: |
  The original user question:

  Question: {input}

  Use this task context to guide your answer:

  Task context: {user_context}

  Additionally to the task context, here is some information of the user which might be relevant:

  User info: {user_info}

  You have access to these tools:

  {tool_descriptions}

  We are using this format:

  Question: the input question you must answer.
  Thought: you should always think about what to do  
  Action: the action to take, should be one of [{tool_names}]  
  Action Input: the input to the action  
  Observation: the result of the action  
  ... (this Thought/Action/Action Input/Observation can repeat N times)  
  Thought: I now know the final answer  
  Final Answer: the final answer to the original input question. Make it long enough and detailed if necessary.

  Begin!

  Question: {input}  
  {agent_scratchpad}
  DO NOT REPEAT-WRITE STEPS ALREADY DONE! Write the final answer as soon as ready.


react_get_task_description: >
  Within an ongoing conversation, a user asked this query:

  Query: {query}

  Just previously in the conversation, these Questions and Answers happened:

  {previous_messages}

  An expert is going to answer the query, but they don't know anything about these previous messages.
  Make a Contextual Summary of where the previous conversation was heading, especially
  regarding everything that is relevant to answer the Query. Include all data that is necessary to answer
  the Query by copying it fully and without shortening. Disregard unimportant things to the Query.
  Think and try to guide the answer of the expert to the Query based on the contextual information.
  Assume that if the query refers to something, it is refering to something in the previous
  Questions and Answers above.

  BASE YOUR ANSWER ONLY ON THE PREVIOUS MESSAGES.
  In total, make FOUR LINES of the Contextual Summary.
  If no info was given, write "No previous questions".

  Now, WRITE THE FOUR LINES of Contextual Summary.

  Contextual Summary:

